
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  emailVerified: 'emailVerified',
  settings: 'settings',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AudioFileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gcsUri: 'gcsUri',
  filename: 'filename',
  durationMs: 'durationMs',
  sizeBytes: 'sizeBytes',
  language: 'language',
  mode: 'mode',
  gapSec: 'gapSec',
  status: 'status',
  errorMessage: 'errorMessage',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TranscriptRunScalarFieldEnum = {
  id: 'id',
  audioId: 'audioId',
  authorId: 'authorId',
  version: 'version',
  engine: 'engine',
  params: 'params',
  paramsHash: 'paramsHash',
  status: 'status',
  error: 'error',
  text: 'text',
  segments: 'segments',
  speakerCount: 'speakerCount',
  confidence: 'confidence',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.TranscriptRevisionScalarFieldEnum = {
  id: 'id',
  runId: 'runId',
  title: 'title',
  text: 'text',
  segments: 'segments',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.AnalysisScalarFieldEnum = {
  id: 'id',
  runId: 'runId',
  segmentIndex: 'segmentIndex',
  kind: 'kind',
  engine: 'engine',
  params: 'params',
  paramsHash: 'paramsHash',
  status: 'status',
  summary: 'summary',
  score: 'score',
  result: 'result',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.AnnotationScalarFieldEnum = {
  id: 'id',
  runId: 'runId',
  userId: 'userId',
  content: 'content',
  anchorType: 'anchorType',
  anchorValue: 'anchorValue',
  createdAt: 'createdAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.AudioTagScalarFieldEnum = {
  id: 'id',
  audioId: 'audioId',
  key: 'key',
  createdAt: 'createdAt'
};

exports.Prisma.UsageLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  day: 'day',
  uploadCount: 'uploadCount',
  durationMs: 'durationMs',
  createdAt: 'createdAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  audioId: 'audioId',
  runId: 'runId',
  jobType: 'jobType',
  providerJobId: 'providerJobId',
  status: 'status',
  retryCount: 'retryCount',
  nextRetryAt: 'nextRetryAt',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  kind: 'kind',
  targetId: 'targetId',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  planType: 'planType',
  startedAt: 'startedAt',
  expiresAt: 'expiresAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SharedBbcResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  externalUrl: 'externalUrl',
  durationMs: 'durationMs',
  transcript: 'transcript',
  segments: 'segments',
  uploadedById: 'uploadedById',
  isPublished: 'isPublished',
  publishDate: 'publishDate',
  episodeNumber: 'episodeNumber',
  seasonNumber: 'seasonNumber',
  bbcUrl: 'bbcUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sourceType: 'sourceType',
  licenseInfo: 'licenseInfo'
};

exports.Prisma.LearningSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  audioId: 'audioId',
  transcriptRunId: 'transcriptRunId',
  completedSegments: 'completedSegments',
  totalSegments: 'totalSegments',
  listeningTimeMs: 'listeningTimeMs',
  practiceTimeMs: 'practiceTimeMs',
  loopCount: 'loopCount',
  recordingCount: 'recordingCount',
  score: 'score',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TakedownRequestScalarFieldEnum = {
  id: 'id',
  resourceId: 'resourceId',
  reason: 'reason',
  contactInfo: 'contactInfo',
  additionalInfo: 'additionalInfo',
  requestType: 'requestType',
  status: 'status',
  adminNotes: 'adminNotes',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  AuthSession: 'AuthSession',
  AudioFile: 'AudioFile',
  TranscriptRun: 'TranscriptRun',
  TranscriptRevision: 'TranscriptRevision',
  Analysis: 'Analysis',
  Annotation: 'Annotation',
  AudioTag: 'AudioTag',
  UsageLog: 'UsageLog',
  Job: 'Job',
  AuditLog: 'AuditLog',
  Subscription: 'Subscription',
  SharedBbcResource: 'SharedBbcResource',
  LearningSession: 'LearningSession',
  PasswordResetToken: 'PasswordResetToken',
  TakedownRequest: 'TakedownRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
