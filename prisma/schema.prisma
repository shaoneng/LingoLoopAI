// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  displayName   String?
  avatarUrl     String?
  emailVerified Boolean  @default(false)
  settings      Json?
  role          Role     @default(USER)
  subscription  Subscription?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  audioFiles          AudioFile[]
  transcriptRuns      TranscriptRun[] @relation("RunAuthor")
  annotations         Annotation[]
  usageLogs           UsageLog[]
  authSessions        AuthSession[]
  auditLogs           AuditLog[]
  passwordResetTokens PasswordResetToken[]
  sharedBbcResources  SharedBbcResource[]
  learningSessions    LearningSession[]
}

model AuthSession {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model AudioFile {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  gcsUri       String
  filename     String
  durationMs   Int?
  sizeBytes    BigInt?
  language     String?
  mode         String?
  gapSec       Float?
  status       String
  errorMessage String?
  meta         Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  transcriptRuns TranscriptRun[]
  tags           AudioTag[]
  Job            Job[]
  learningSessions LearningSession[]
}

model TranscriptRun {
  id           String    @id @default(uuid())
  audio        AudioFile @relation(fields: [audioId], references: [id])
  audioId      String
  author       User?     @relation("RunAuthor", fields: [authorId], references: [id])
  authorId     String?
  version      Int
  engine       String
  params       Json?
  paramsHash   String
  status       String
  error        String?
  text         String?
  segments     Json?
  speakerCount Int?
  confidence   Float?
  createdAt    DateTime  @default(now())
  completedAt  DateTime?

  revisions        TranscriptRevision[]
  annotations      Annotation[]
  jobs             Job[]
  analyses         Analysis[]
  learningSessions LearningSession[]

  @@unique([audioId, paramsHash])
  @@index([audioId, createdAt])
}

model TranscriptRevision {
  id        String        @id @default(uuid())
  run       TranscriptRun @relation(fields: [runId], references: [id])
  runId     String
  title     String?
  text      String
  segments  Json?
  createdBy String?
  createdAt DateTime      @default(now())
}

model Analysis {
  id            String        @id @default(uuid())
  run           TranscriptRun @relation(fields: [runId], references: [id])
  runId         String
  segmentIndex  Int?
  kind          String
  engine        String
  params        Json?
  paramsHash    String
  status        String
  summary       String?
  score         Float?
  result        Json?
  error         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?

  @@unique([runId, segmentIndex, kind, engine, paramsHash])
  @@index([runId, segmentIndex, kind])
}

model Annotation {
  id          String        @id @default(uuid())
  run         TranscriptRun @relation(fields: [runId], references: [id])
  runId       String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  content     String
  anchorType  String
  anchorValue String
  createdAt   DateTime      @default(now())
  isDeleted   Boolean       @default(false)
}

model AudioTag {
  id        String    @id @default(uuid())
  audio     AudioFile @relation(fields: [audioId], references: [id])
  audioId   String
  key       String
  createdAt DateTime  @default(now())

  @@unique([audioId, key])
}

model UsageLog {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  day         DateTime
  uploadCount Int      @default(0)
  durationMs  Int      @default(0)
  createdAt   DateTime @default(now())

  @@unique([userId, day])
}

model Job {
  id            String        @id @default(uuid())
  audio         AudioFile?    @relation(fields: [audioId], references: [id])
  audioId       String?
  run           TranscriptRun @relation(fields: [runId], references: [id])
  runId         String
  jobType       String
  providerJobId String?
  status        String
  retryCount    Int           @default(0)
  nextRetryAt   DateTime?
  errorMessage  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([status])
}

model AuditLog {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  kind      String
  targetId  String?
  meta      Json?
  createdAt DateTime @default(now())
}

model Subscription {
  id          String             @id @default(uuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  status      SubscriptionStatus @default(ACTIVE)
  planType    String             @default("monthly") // monthly, yearly
  startedAt   DateTime           @default(now())
  expiresAt   DateTime
  cancelledAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([userId])
}

model SharedBbcResource {
  id            String   @id @default(uuid())
  title         String
  description   String?
  externalUrl   String?  // External audio URL (BBC official or other sources)
  durationMs    Int?
  transcript    String?  // Transcript text for display purposes
  segments      Json?    // Transcript segments for display
  uploadedBy    User     @relation(fields: [uploadedById], references: [id])
  uploadedById  String
  isPublished   Boolean  @default(false)
  publishDate   DateTime?
  episodeNumber Int?
  seasonNumber  Int?
  bbcUrl        String?  // BBC official page URL
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sourceType    String   @default("external") // external, user_uploaded, cc_licensed
  licenseInfo   String?  // License information for copyright compliance

  takedownRequests TakedownRequest[]

  @@index([isPublished, publishDate])
}

model LearningSession {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String
  audioFile           AudioFile @relation(fields: [audioId], references: [id])
  audioId             String
  transcriptRun       TranscriptRun? @relation(fields: [transcriptRunId], references: [id])
  transcriptRunId     String?
  completedSegments   Int      @default(0)
  totalSegments       Int      @default(0)
  listeningTimeMs     Int      @default(0)  // 实际听音时长
  practiceTimeMs      Int      @default(0)  // 跟读练习时长
  loopCount           Int      @default(0)  // A/B循环次数
  recordingCount      Int      @default(0)  // 录音次数
  score               Float?   // 学习评分
  completedAt         DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?

  @@index([userId, createdAt])
  @@index([userId, completedAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model TakedownRequest {
  id             String   @id @default(uuid())
  resourceId     String
  resource       SharedBbcResource @relation(fields: [resourceId], references: [id])
  reason         String
  contactInfo    String
  additionalInfo String?
  requestType    String   @default("copyright_infringement")
  status         String   @default("pending") // pending, processing, resolved, rejected
  adminNotes     String?
  resolvedAt     DateTime?
  resolvedBy     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([status, createdAt])
  @@index([resourceId])
}
