name: Deploy LingoLoop AI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # 部署前端到 Cloudflare Pages
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Cloudflare Pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: lingoloop-frontend
          directory: frontend/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # 部署后端到 Cloudflare Workers
  deploy-backend:
    runs-on: ubuntu-latest
    name: Deploy Backend to Cloudflare Workers

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: workers/package-lock.json

      - name: Install Workers dependencies
        working-directory: ./workers
        run: npm ci

      - name: Build Workers
        working-directory: ./workers
        run: npm run build

      - name: Deploy to Cloudflare Workers
        working-directory: ./workers
        run: npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 运行测试
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd workers && npm ci

      - name: Run frontend tests
        run: npm test

      - name: Run backend tests
        working-directory: ./workers
        run: npm test

  # 数据库迁移
  migrate:
    runs-on: ubuntu-latest
    name: Database Migration

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migration
        run: npx prisma db push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Generate Prisma client
        run: npx prisma generate